// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextIndex", "fullTextSearch"]
}

// Recipe
model Recipe {
  uid           String   @id @default(cuid())
  id            String   @unique
  title         String
  description   String?
  notes         String?
  Info          Json?
  ingredients   Json?
  steps         Json?
  keywords      Json?
  dietary       Json?
  allergens     Json?
  sweet_savoury Json?
  mealTime      Json?
  version       String
  createdAt     DateTime @default(now())
  lastUpdated   DateTime @updatedAt
  lastUpdatedBy String
  createdBy     String
  user          User     @relation(fields: [createdBy], references: [id])

  madeRecipe  Int?
  savedRecipe Int?


  @@index([createdBy])
  @@map("recipes")
}

// Necessary for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes        Recipe[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
